/* automatically generated by rust-bindgen */

pub enum _cairo_surface { }
pub type cairo_surface_t = _cairo_surface;
pub enum _cairo_scaled_font { }
pub type cairo_scaled_font_t = _cairo_scaled_font;
pub enum _FcPattern { }
pub type FcPattern = _FcPattern;
pub enum ID3D11Texture2D { }
pub enum ID3D11Device { }
pub enum ID2D1Device { }
pub enum IDWriteRenderingParams { }
pub enum IDWriteFont { }
pub enum IDWriteFontFamily { }
pub enum IDWriteFontFace { }
pub enum GrContext { }
pub enum CGContext { }
pub type CGContextRef = *mut CGContext;
pub enum FilterNode { }
pub enum LogForwarder { }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct NativeSurface {
    pub mType: NativeSurfaceType,
    pub mFormat: SurfaceFormat,
    pub mSize: IntSize,
    pub mSurface: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for NativeSurface {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_NativeSurface() {
    assert_eq!(::std::mem::size_of::<NativeSurface>() , 24usize);
    assert_eq!(::std::mem::align_of::<NativeSurface>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct NativeFont {
    pub mType: NativeFontType,
    pub mFont: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for NativeFont {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_NativeFont() {
    assert_eq!(::std::mem::size_of::<NativeFont>() , 16usize);
    assert_eq!(::std::mem::align_of::<NativeFont>() , 8usize);
}
/**
 * This structure is used to send draw options that are universal to all drawing
 * operations.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DrawOptions {
    /**< Alpha value by which the mask generated by this
                                     operation is multiplied. */
    pub mAlpha: Float,
    /**< The operator that indicates how the source and
                                     destination patterns are blended. */
    pub mCompositionOp: CompositionOp,
    /**< The AntiAlias mode used for this drawing
                                     operation. */
    pub mAntialiasMode: AntialiasMode,
}
impl ::std::clone::Clone for DrawOptions {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_DrawOptions() {
    assert_eq!(::std::mem::size_of::<DrawOptions>() , 8usize);
    assert_eq!(::std::mem::align_of::<DrawOptions>() , 4usize);
}
/**
 * This structure is used to send stroke options that are used in stroking
 * operations.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct StrokeOptions {
    //!< Width of the stroke in userspace.
    pub mLineWidth: Float,
    //!< Miter limit in units of linewidth
    pub mMiterLimit: Float,
    /**< Series of on/off userspace lengths defining dash.
                                  Owned by the caller; must live at least as long as
                                  this StrokeOptions.
                                  mDashPattern != null <=> mDashLength > 0. */
    pub mDashPattern: *const Float,
    //!< Number of on/off lengths in mDashPattern.
    pub mDashLength: usize,
    /**< Userspace offset within mDashPattern at which
                                  stroking begins. */
    pub mDashOffset: Float,
    //!< Join style used for joining lines.
    pub mLineJoin: JoinStyle,
    //!< Cap style used for capping lines.
    pub mLineCap: CapStyle,
}
impl ::std::clone::Clone for StrokeOptions {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_StrokeOptions() {
    assert_eq!(::std::mem::size_of::<StrokeOptions>() , 32usize);
    assert_eq!(::std::mem::align_of::<StrokeOptions>() , 8usize);
}
/**
 * This structure supplies additional options for calls to DrawSurface.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DrawSurfaceOptions {
    /**< SamplingFilter used when resampling source surface
                                       region to the destination region. */
    pub mSamplingFilter: SamplingFilter,
    /**< This indicates whether the implementation is
                                       allowed to sample pixels outside the source
                                       rectangle as specified in DrawSurface on
                                       the surface. */
    pub mSamplingBounds: SamplingBounds,
}
impl ::std::clone::Clone for DrawSurfaceOptions {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_DrawSurfaceOptions() {
    assert_eq!(::std::mem::size_of::<DrawSurfaceOptions>() , 2usize);
    assert_eq!(::std::mem::align_of::<DrawSurfaceOptions>() , 1usize);
}
/**
 * This class is used to store gradient stops, it can only be used with a
 * matching DrawTarget. Not adhering to this condition will make a draw call
 * fail.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct GradientStops {
    pub _vftable: *const _vftable_GradientStops,
    pub _base: RefCounted<GradientStops>,
}
#[repr(C)]
pub struct _vftable_GradientStops {
    pub GetBackendType: unsafe extern "C" fn(this:
                                                 *mut ::std::os::raw::c_void)
                            -> BackendType,
    pub IsValid: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> bool,
}
#[test]
fn bindgen_test_layout_GradientStops() {
    assert_eq!(::std::mem::size_of::<GradientStops>() , 16usize);
    assert_eq!(::std::mem::align_of::<GradientStops>() , 8usize);
}
/**
 * This is the base class for 'patterns'. Patterns describe the pixels used as
 * the source for a masked composition operation that is done by the different
 * drawing commands. These objects are not backend specific, however for
 * example the gradient stops on a gradient pattern can be backend specific.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct Pattern {
    pub _vftable: *const _vftable_Pattern,
}
#[repr(C)]
pub struct _vftable_Pattern {
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> PatternType,
}
#[test]
fn bindgen_test_layout_Pattern() {
    assert_eq!(::std::mem::size_of::<Pattern>() , 8usize);
    assert_eq!(::std::mem::align_of::<Pattern>() , 8usize);
}
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct ColorPattern {
    pub _base: Pattern,
    pub mColor: Color,
}
#[repr(C)]
pub struct _vftable_ColorPattern {
    pub _base: _vftable_Pattern,
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> PatternType,
}
#[test]
fn bindgen_test_layout_ColorPattern() {
    assert_eq!(::std::mem::size_of::<ColorPattern>() , 24usize);
    assert_eq!(::std::mem::align_of::<ColorPattern>() , 8usize);
}
/**
 * This class is used for Linear Gradient Patterns, the gradient stops are
 * stored in a separate object and are backend dependent. This class itself
 * may be used on the stack.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct LinearGradientPattern {
    pub _base: Pattern,
    //!< Start of the linear gradient
    pub mBegin: Point,
    /**< End of the linear gradient - NOTE: In the case
                                     of a zero length gradient it will act as the
                                     color of the last stop. */
    pub mEnd: Point,
    /**< GradientStops object for this gradient, this
                                     should match the backend type of the draw
                                     target this pattern will be used with. */
    pub mStops: RefPtr<GradientStops>,
    /**< A matrix that transforms the pattern into
                                     user space */
    pub mMatrix: Matrix,
}
#[repr(C)]
pub struct _vftable_LinearGradientPattern {
    pub _base: _vftable_Pattern,
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> PatternType,
}
#[test]
fn bindgen_test_layout_LinearGradientPattern() {
    assert_eq!(::std::mem::size_of::<LinearGradientPattern>() , 56usize);
    assert_eq!(::std::mem::align_of::<LinearGradientPattern>() , 8usize);
}
/**
 * This class is used for Radial Gradient Patterns, the gradient stops are
 * stored in a separate object and are backend dependent. This class itself
 * may be used on the stack.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct RadialGradientPattern {
    pub _base: Pattern,
    //!< Center of the inner (focal) circle.
    pub mCenter1: Point,
    //!< Center of the outer circle.
    pub mCenter2: Point,
    //!< Radius of the inner (focal) circle.
    pub mRadius1: Float,
    //!< Radius of the outer circle.
    pub mRadius2: Float,
    /**< GradientStops object for this gradient, this
                                     should match the backend type of the draw target
                                     this pattern will be used with. */
    pub mStops: RefPtr<GradientStops>,
    //!< A matrix that transforms the pattern into user space
    pub mMatrix: Matrix,
}
#[repr(C)]
pub struct _vftable_RadialGradientPattern {
    pub _base: _vftable_Pattern,
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> PatternType,
}
#[test]
fn bindgen_test_layout_RadialGradientPattern() {
    assert_eq!(::std::mem::size_of::<RadialGradientPattern>() , 64usize);
    assert_eq!(::std::mem::align_of::<RadialGradientPattern>() , 8usize);
}
/**
 * This class is used for Surface Patterns, they wrap a surface and a
 * repetition mode for the surface. This may be used on the stack.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct SurfacePattern {
    pub _base: Pattern,
    //!< Surface to use for drawing
    pub mSurface: RefPtr<SourceSurface>,
    /**< This determines how the image is extended
                                       outside the bounds of the image */
    pub mExtendMode: ExtendMode,
    //!< Resampling filter for resampling the image.
    pub mSamplingFilter: SamplingFilter,
    //!< Transforms the pattern into user space
    pub mMatrix: Matrix,
    /**< Rect that must not be sampled outside of,
                                       or an empty rect if none has been specified. */
    pub mSamplingRect: IntRect,
}
#[repr(C)]
pub struct _vftable_SurfacePattern {
    pub _base: _vftable_Pattern,
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> PatternType,
}
#[test]
fn bindgen_test_layout_SurfacePattern() {
    assert_eq!(::std::mem::size_of::<SurfacePattern>() , 64usize);
    assert_eq!(::std::mem::align_of::<SurfacePattern>() , 8usize);
}
pub enum StoredPattern { }
pub enum DrawTargetCaptureImpl { }
/**
 * This is the base class for source surfaces. These objects are surfaces
 * which may be used as a source in a SurfacePattern or a DrawSurface call.
 * They cannot be drawn to directly.
 *
 * Although SourceSurface has thread-safe refcount, some SourceSurface cannot
 * be used on random threads at the same time. Only DataSourceSurface can be
 * used on random threads now. This will be fixed in the future. Eventually
 * all SourceSurface should be thread-safe.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct SourceSurface {
    pub _vftable: *const _vftable_SourceSurface,
    pub _base: AtomicRefCounted<SourceSurface>,
    pub mUserData: UserData,
}
#[repr(C)]
pub struct _vftable_SourceSurface {
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> SurfaceType,
    pub GetSize: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> IntSize,
    pub GetFormat: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> SurfaceFormat,
    pub IsValid: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> bool,
    pub GetDataSurface: unsafe extern "C" fn(this:
                                                 *mut ::std::os::raw::c_void)
                            -> already_AddRefed<DataSourceSurface>,
    pub GetNativeSurface: unsafe extern "C" fn(this:
                                                   *mut ::std::os::raw::c_void,
                                               aType: NativeSurfaceType)
                              -> *mut ::std::os::raw::c_void,
    pub GuaranteePersistance: unsafe extern "C" fn(this:
                                                       *mut ::std::os::raw::c_void),
}
#[test]
fn bindgen_test_layout_SourceSurface() {
    assert_eq!(::std::mem::size_of::<SourceSurface>() , 32usize);
    assert_eq!(::std::mem::align_of::<SourceSurface>() , 8usize);
}
extern "C" {
    fn ZN7mozilla3gfx13SourceSurface11AddUserDataEPNS0_11UserDataKeyEPvPFvS4_E(this:
                                                                                   *mut SourceSurface,
                                                                               key:
                                                                                   *mut UserDataKey,
                                                                               userData:
                                                                                   *mut ::std::os::raw::c_void,
                                                                               destroy:
                                                                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                                                  *mut ::std::os::raw::c_void)>);
    fn ZN7mozilla3gfx13SourceSurface11GetUserDataEPNS0_11UserDataKeyE(this:
                                                                          *mut SourceSurface,
                                                                      key:
                                                                          *mut UserDataKey)
     -> *mut ::std::os::raw::c_void;
}
impl SourceSurface {
    #[inline]
    pub unsafe fn AddUserData(&mut self, key: *mut UserDataKey,
                              userData: *mut ::std::os::raw::c_void,
                              destroy:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>) {
        ZN7mozilla3gfx13SourceSurface11AddUserDataEPNS0_11UserDataKeyEPvPFvS4_E(&mut *self,
                                                                                key,
                                                                                userData,
                                                                                destroy)
    }
    #[inline]
    pub unsafe fn GetUserData(&mut self, key: *mut UserDataKey)
     -> *mut ::std::os::raw::c_void {
        ZN7mozilla3gfx13SourceSurface11GetUserDataEPNS0_11UserDataKeyE(&mut *self,
                                                                       key)
    }
}
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct DataSourceSurface {
    pub _base: SourceSurface,
    pub mIsMapped: bool,
}
#[repr(C)]
pub struct _vftable_DataSourceSurface {
    pub _base: _vftable_SourceSurface,
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> SurfaceType,
    pub GetData: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> *mut u8,
    pub Stride: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                    -> i32,
    pub Map: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                  arg1: DataSourceSurface_MapType,
                                  aMappedSurface:
                                      *mut DataSourceSurface_MappedSurface)
                 -> bool,
    pub Unmap: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub GetDataSurface: unsafe extern "C" fn(this:
                                                 *mut ::std::os::raw::c_void)
                            -> already_AddRefed<DataSourceSurface>,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DataSourceSurface_MappedSurface {
    pub mData: *mut u8,
    pub mStride: i32,
}
impl ::std::clone::Clone for DataSourceSurface_MappedSurface {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_DataSourceSurface_MappedSurface() {
    assert_eq!(::std::mem::size_of::<DataSourceSurface_MappedSurface>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<DataSourceSurface_MappedSurface>() ,
               8usize);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub enum DataSourceSurface_MapType { READ = 0, WRITE = 1, READ_WRITE = 2, }
/**
   * This is a scoped version of Map(). Map() is called in the constructor and
   * Unmap() in the destructor. Use this for automatic unmapping of your data
   * surfaces.
   *
   * Use IsMapped() to verify whether Map() succeeded or not.
   */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct DataSourceSurface_ScopedMap {
    pub mSurface: RefPtr<DataSourceSurface>,
    pub mMap: DataSourceSurface_MappedSurface,
    pub mIsMapped: bool,
}
#[test]
fn bindgen_test_layout_DataSourceSurface_ScopedMap() {
    assert_eq!(::std::mem::size_of::<DataSourceSurface_ScopedMap>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<DataSourceSurface_ScopedMap>() ,
               8usize);
}
extern "C" {
    fn ZNK7mozilla3gfx17DataSourceSurface9ScopedMap7GetDataEv(this:
                                                                  *mut DataSourceSurface_ScopedMap)
     -> *mut u8;
    fn ZNK7mozilla3gfx17DataSourceSurface9ScopedMap9GetStrideEv(this:
                                                                    *mut DataSourceSurface_ScopedMap)
     -> i32;
    fn ZNK7mozilla3gfx17DataSourceSurface9ScopedMap16GetMappedSurfaceEv(this:
                                                                            *mut DataSourceSurface_ScopedMap)
     -> *const DataSourceSurface_MappedSurface;
    fn ZNK7mozilla3gfx17DataSourceSurface9ScopedMap8IsMappedEv(this:
                                                                   *mut DataSourceSurface_ScopedMap)
     -> bool;
}
impl DataSourceSurface_ScopedMap {
    #[inline]
    pub unsafe fn GetData(&mut self) -> *mut u8 {
        ZNK7mozilla3gfx17DataSourceSurface9ScopedMap7GetDataEv(&mut *self)
    }
    #[inline]
    pub unsafe fn GetStride(&mut self) -> i32 {
        ZNK7mozilla3gfx17DataSourceSurface9ScopedMap9GetStrideEv(&mut *self)
    }
    #[inline]
    pub unsafe fn GetMappedSurface(&mut self)
     -> *const DataSourceSurface_MappedSurface {
        ZNK7mozilla3gfx17DataSourceSurface9ScopedMap16GetMappedSurfaceEv(&mut *self)
    }
    #[inline]
    pub unsafe fn IsMapped(&mut self) -> bool {
        ZNK7mozilla3gfx17DataSourceSurface9ScopedMap8IsMappedEv(&mut *self)
    }
}
#[test]
fn bindgen_test_layout_DataSourceSurface() {
    assert_eq!(::std::mem::size_of::<DataSourceSurface>() , 40usize);
    assert_eq!(::std::mem::align_of::<DataSourceSurface>() , 8usize);
}
/** This is an abstract object that accepts path segments. */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct PathSink {
    pub _vftable: *const _vftable_PathSink,
    pub _base: RefCounted<PathSink>,
}
#[repr(C)]
pub struct _vftable_PathSink {
    pub MoveTo: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     aPoint: *const Point),
    pub LineTo: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     aPoint: *const Point),
    pub BezierTo: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                       aCP1: *const Point, aCP2: *const Point,
                                       aCP3: *const Point),
    pub QuadraticBezierTo: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                aCP1: *const Point,
                                                aCP2: *const Point),
    pub Close: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub Arc: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                  aOrigin: *const Point, aRadius: f32,
                                  aStartAngle: f32, aEndAngle: f32,
                                  aAntiClockwise: bool),
    pub CurrentPoint: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                          -> Point,
}
#[test]
fn bindgen_test_layout_PathSink() {
    assert_eq!(::std::mem::size_of::<PathSink>() , 16usize);
    assert_eq!(::std::mem::align_of::<PathSink>() , 8usize);
}
pub enum FlattenedPath { }
/** The path class is used to create (sets of) figures of any shape that can be
 * filled or stroked to a DrawTarget
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct Path {
    pub _vftable: *const _vftable_Path,
    pub _base: RefCounted<Path>,
    pub mFlattenedPath: RefPtr<FlattenedPath>,
}
#[repr(C)]
pub struct _vftable_Path {
    pub GetBackendType: unsafe extern "C" fn(this:
                                                 *mut ::std::os::raw::c_void)
                            -> BackendType,
    pub CopyToBuilder: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                            aFillRule: FillRule)
                           -> already_AddRefed<PathBuilder>,
    pub TransformedCopyToBuilder: unsafe extern "C" fn(this:
                                                           *mut ::std::os::raw::c_void,
                                                       aTransform:
                                                           *const Matrix,
                                                       aFillRule: FillRule)
                                      -> already_AddRefed<PathBuilder>,
    pub ContainsPoint: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                            aPoint: *const Point,
                                            aTransform: *const Matrix)
                           -> bool,
    pub StrokeContainsPoint: unsafe extern "C" fn(this:
                                                      *mut ::std::os::raw::c_void,
                                                  aStrokeOptions:
                                                      *const StrokeOptions,
                                                  aPoint: *const Point,
                                                  aTransform: *const Matrix)
                                 -> bool,
    pub GetBounds: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        aTransform: *const Matrix) -> Rect,
    pub GetStrokedBounds: unsafe extern "C" fn(this:
                                                   *mut ::std::os::raw::c_void,
                                               aStrokeOptions:
                                                   *const StrokeOptions,
                                               aTransform: *const Matrix)
                              -> Rect,
    pub StreamToSink: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                           aSink: *mut PathSink),
    pub GetFillRule: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                         -> FillRule,
    pub ComputeLength: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                           -> Float,
    pub ComputePointAtLength: unsafe extern "C" fn(this:
                                                       *mut ::std::os::raw::c_void,
                                                   aLength: Float,
                                                   aTangent: *mut Point)
                                  -> Point,
}
#[test]
fn bindgen_test_layout_Path() {
    assert_eq!(::std::mem::size_of::<Path>() , 24usize);
    assert_eq!(::std::mem::align_of::<Path>() , 8usize);
}
extern "C" {
    fn ZNK7mozilla3gfx4Path13CopyToBuilderEv(this: *mut Path)
     -> already_AddRefed<PathBuilder>;
    fn ZNK7mozilla3gfx4Path24TransformedCopyToBuilderERKNS0_6MatrixE(this:
                                                                         *mut Path,
                                                                     aTransform:
                                                                         *const Matrix)
     -> already_AddRefed<PathBuilder>;
    fn ZN7mozilla3gfx4Path19EnsureFlattenedPathEv(this: *mut Path);
}
impl Path {
    /** This returns a PathBuilder object that contains a copy of the contents of
   * this path and is still writable.
   */
    #[inline]
    pub unsafe fn CopyToBuilder(&mut self) -> already_AddRefed<PathBuilder> {
        ZNK7mozilla3gfx4Path13CopyToBuilderEv(&mut *self)
    }
    #[inline]
    pub unsafe fn TransformedCopyToBuilder(&mut self,
                                           aTransform: *const Matrix)
     -> already_AddRefed<PathBuilder> {
        ZNK7mozilla3gfx4Path24TransformedCopyToBuilderERKNS0_6MatrixE(&mut *self,
                                                                      aTransform)
    }
    #[inline]
    pub unsafe fn EnsureFlattenedPath(&mut self) {
        ZN7mozilla3gfx4Path19EnsureFlattenedPathEv(&mut *self)
    }
}
/** The PathBuilder class allows path creation. Once finish is called on the
 * pathbuilder it may no longer be written to.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct PathBuilder {
    pub _base: PathSink,
}
#[repr(C)]
pub struct _vftable_PathBuilder {
    pub _base: _vftable_PathSink,
    pub Finish: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                    -> already_AddRefed<Path>,
    pub GetBackendType: unsafe extern "C" fn(this:
                                                 *mut ::std::os::raw::c_void)
                            -> BackendType,
}
#[test]
fn bindgen_test_layout_PathBuilder() {
    assert_eq!(::std::mem::size_of::<PathBuilder>() , 16usize);
    assert_eq!(::std::mem::align_of::<PathBuilder>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Glyph {
    pub mIndex: u32,
    pub mPosition: Point,
}
impl ::std::clone::Clone for Glyph {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Glyph() {
    assert_eq!(::std::mem::size_of::<Glyph>() , 12usize);
    assert_eq!(::std::mem::align_of::<Glyph>() , 4usize);
}
/** This class functions as a glyph buffer that can be drawn to a DrawTarget.
 * @todo XXX - This should probably contain the guts of gfxTextRun in the future as
 * roc suggested. But for now it's a simple container for a glyph vector.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct GlyphBuffer {
    //!< A pointer to a buffer of glyphs. Managed by the caller.
    pub mGlyphs: *const Glyph,
    //!< Number of glyphs mGlyphs points to.
    pub mNumGlyphs: u32,
}
impl ::std::clone::Clone for GlyphBuffer {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_GlyphBuffer() {
    assert_eq!(::std::mem::size_of::<GlyphBuffer>() , 16usize);
    assert_eq!(::std::mem::align_of::<GlyphBuffer>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct GlyphMetrics {
    pub mXBearing: Float,
    pub mXAdvance: Float,
    pub mYBearing: Float,
    pub mYAdvance: Float,
    pub mWidth: Float,
    pub mHeight: Float,
}
impl ::std::clone::Clone for GlyphMetrics {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_GlyphMetrics() {
    assert_eq!(::std::mem::size_of::<GlyphMetrics>() , 24usize);
    assert_eq!(::std::mem::align_of::<GlyphMetrics>() , 4usize);
}
/** This class is an abstraction of a backend/platform specific font object
 * at a particular size. It is passed into text drawing calls to describe
 * the font used for the drawing call.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct ScaledFont {
    pub _vftable: *const _vftable_ScaledFont,
    pub _base: RefCounted<ScaledFont>,
    pub mUserData: UserData,
}
#[repr(C)]
pub struct _vftable_ScaledFont {
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> FontType,
    pub GetPathForGlyphs: unsafe extern "C" fn(this:
                                                   *mut ::std::os::raw::c_void,
                                               aBuffer: *const GlyphBuffer,
                                               aTarget: *const DrawTarget)
                              -> already_AddRefed<Path>,
    pub CopyGlyphsToBuilder: unsafe extern "C" fn(this:
                                                      *mut ::std::os::raw::c_void,
                                                  aBuffer: *const GlyphBuffer,
                                                  aBuilder: *mut PathBuilder,
                                                  aBackendType: BackendType,
                                                  aTransformHint:
                                                      *const Matrix),
    pub GetGlyphDesignMetrics: unsafe extern "C" fn(this:
                                                        *mut ::std::os::raw::c_void,
                                                    aGlyphIndices: *const u16,
                                                    aNumGlyphs: u32,
                                                    aGlyphMetrics:
                                                        *mut GlyphMetrics),
    pub GetFontFileData: unsafe extern "C" fn(this:
                                                  *mut ::std::os::raw::c_void,
                                              arg1:
                                                  ::std::option::Option<unsafe extern "C" fn()>,
                                              arg2:
                                                  *mut ::std::os::raw::c_void)
                             -> bool,
    pub GetFontDescriptor: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                arg1:
                                                    ::std::option::Option<unsafe extern "C" fn()>,
                                                arg2:
                                                    *mut ::std::os::raw::c_void)
                               -> bool,
}
#[test]
fn bindgen_test_layout_ScaledFont() {
    assert_eq!(::std::mem::size_of::<ScaledFont>() , 32usize);
    assert_eq!(::std::mem::align_of::<ScaledFont>() , 8usize);
}
extern "C" {
    fn ZN7mozilla3gfx10ScaledFont11AddUserDataEPNS0_11UserDataKeyEPvPFvS4_E(this:
                                                                                *mut ScaledFont,
                                                                            key:
                                                                                *mut UserDataKey,
                                                                            userData:
                                                                                *mut ::std::os::raw::c_void,
                                                                            destroy:
                                                                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                                               *mut ::std::os::raw::c_void)>);
    fn ZN7mozilla3gfx10ScaledFont11GetUserDataEPNS0_11UserDataKeyE(this:
                                                                       *mut ScaledFont,
                                                                   key:
                                                                       *mut UserDataKey)
     -> *mut ::std::os::raw::c_void;
}
impl ScaledFont {
    #[inline]
    pub unsafe fn AddUserData(&mut self, key: *mut UserDataKey,
                              userData: *mut ::std::os::raw::c_void,
                              destroy:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>) {
        ZN7mozilla3gfx10ScaledFont11AddUserDataEPNS0_11UserDataKeyEPvPFvS4_E(&mut *self,
                                                                             key,
                                                                             userData,
                                                                             destroy)
    }
    #[inline]
    pub unsafe fn GetUserData(&mut self, key: *mut UserDataKey)
     -> *mut ::std::os::raw::c_void {
        ZN7mozilla3gfx10ScaledFont11GetUserDataEPNS0_11UserDataKeyE(&mut *self,
                                                                    key)
    }
}
/**
 * Derived classes hold a native font resource from which to create
 * ScaledFonts.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct NativeFontResource {
    pub _vftable: *const _vftable_NativeFontResource,
    pub _base: RefCounted<NativeFontResource>,
}
#[repr(C)]
pub struct _vftable_NativeFontResource {
    pub CreateScaledFont: unsafe extern "C" fn(this:
                                                   *mut ::std::os::raw::c_void,
                                               aIndex: u32, aGlyphSize: u32)
                              -> already_AddRefed<ScaledFont>,
}
#[test]
fn bindgen_test_layout_NativeFontResource() {
    assert_eq!(::std::mem::size_of::<NativeFontResource>() , 16usize);
    assert_eq!(::std::mem::align_of::<NativeFontResource>() , 8usize);
}
/** This class is designed to allow passing additional glyph rendering
 * parameters to the glyph drawing functions. This is an empty wrapper class
 * merely used to allow holding on to and passing around platform specific
 * parameters. This is because different platforms have unique rendering
 * parameters.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct GlyphRenderingOptions {
    pub _vftable: *const _vftable_GlyphRenderingOptions,
    pub _base: RefCounted<GlyphRenderingOptions>,
}
#[repr(C)]
pub struct _vftable_GlyphRenderingOptions {
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> FontType,
}
#[test]
fn bindgen_test_layout_GlyphRenderingOptions() {
    assert_eq!(::std::mem::size_of::<GlyphRenderingOptions>() , 16usize);
    assert_eq!(::std::mem::align_of::<GlyphRenderingOptions>() , 8usize);
}
/** This is the main class used for all the drawing. It is created through the
 * factory and accepts drawing commands. The results of drawing to a target
 * may be used either through a Snapshot or by flushing the target and directly
 * accessing the backing store a DrawTarget was created with.
 */
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct DrawTarget {
    pub _vftable: *const _vftable_DrawTarget,
    pub _base: RefCounted<DrawTarget>,
    pub mUserData: UserData,
    pub mTransform: Matrix,
    pub mOpaqueRect: IntRect,
    pub _bitfield_1: u8,
    pub mFormat: SurfaceFormat,
}
#[repr(C)]
pub struct _vftable_DrawTarget {
    pub IsValid: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> bool,
    pub GetType: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> DrawTargetType,
    pub GetBackendType: unsafe extern "C" fn(this:
                                                 *mut ::std::os::raw::c_void)
                            -> BackendType,
    pub IsRecording: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                         -> bool,
    pub Snapshot: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                      -> already_AddRefed<SourceSurface>,
    pub GetSize: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                     -> IntSize,
    pub LockBits: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                       aData: *mut *mut u8,
                                       aSize: *mut IntSize, aStride: *mut i32,
                                       aFormat: *mut SurfaceFormat,
                                       aOrigin: *mut IntPoint) -> bool,
    pub ReleaseBits: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                          aData: *mut u8),
    pub Flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub DrawCapturedDT: unsafe extern "C" fn(this:
                                                 *mut ::std::os::raw::c_void,
                                             aCaptureDT:
                                                 *mut DrawTargetCapture,
                                             aTransform: *const Matrix),
    pub DrawSurface: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                          aSurface: *mut SourceSurface,
                                          aDest: *const Rect,
                                          aSource: *const Rect,
                                          aSurfOptions:
                                              *const DrawSurfaceOptions,
                                          aOptions: *const DrawOptions),
    pub DrawFilter: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                         aNode: *mut FilterNode,
                                         aSourceRect: *const Rect,
                                         aDestPoint: *const Point,
                                         aOptions: *const DrawOptions),
    pub DrawSurfaceWithShadow: unsafe extern "C" fn(this:
                                                        *mut ::std::os::raw::c_void,
                                                    aSurface:
                                                        *mut SourceSurface,
                                                    aDest: *const Point,
                                                    aColor: *const Color,
                                                    aOffset: *const Point,
                                                    aSigma: Float,
                                                    aOperator: CompositionOp),
    pub ClearRect: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        aRect: *const Rect),
    pub CopySurface: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                          aSurface: *mut SourceSurface,
                                          aSourceRect: *const IntRect,
                                          aDestination: *const IntPoint),
    pub CopyRect: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                       aSourceRect: *const IntRect,
                                       aDestination: *const IntPoint),
    pub FillRect: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                       aRect: *const Rect,
                                       aPattern: *const Pattern,
                                       aOptions: *const DrawOptions),
    pub StrokeRect: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                         aRect: *const Rect,
                                         aPattern: *const Pattern,
                                         aStrokeOptions: *const StrokeOptions,
                                         aOptions: *const DrawOptions),
    pub StrokeLine: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                         aStart: *const Point,
                                         aEnd: *const Point,
                                         aPattern: *const Pattern,
                                         aStrokeOptions: *const StrokeOptions,
                                         aOptions: *const DrawOptions),
    pub Stroke: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     aPath: *const Path,
                                     aPattern: *const Pattern,
                                     aStrokeOptions: *const StrokeOptions,
                                     aOptions: *const DrawOptions),
    pub Fill: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                   aPath: *const Path,
                                   aPattern: *const Pattern,
                                   aOptions: *const DrawOptions),
    pub FillGlyphs: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                         aFont: *mut ScaledFont,
                                         aBuffer: *const GlyphBuffer,
                                         aPattern: *const Pattern,
                                         aOptions: *const DrawOptions,
                                         aRenderingOptions:
                                             *const GlyphRenderingOptions),
    pub Mask: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                   aSource: *const Pattern,
                                   aMask: *const Pattern,
                                   aOptions: *const DrawOptions),
    pub MaskSurface: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                          aSource: *const Pattern,
                                          aMask: *mut SourceSurface,
                                          aOffset: Point,
                                          aOptions: *const DrawOptions),
    pub Draw3DTransformedSurface: unsafe extern "C" fn(this:
                                                           *mut ::std::os::raw::c_void,
                                                       aSurface:
                                                           *mut SourceSurface,
                                                       aMatrix:
                                                           *const Matrix4x4)
                                      -> bool,
    pub PushClip: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                       aPath: *const Path),
    pub PushClipRect: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                           aRect: *const Rect),
    pub PopClip: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub PushLayer: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        aOpaque: bool, aOpacity: Float,
                                        aMask: *mut SourceSurface,
                                        aMaskTransform: *const Matrix,
                                        aBounds: *const IntRect,
                                        aCopyBackground: bool),
    pub PopLayer: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub CreateSourceSurfaceFromData: unsafe extern "C" fn(this:
                                                              *mut ::std::os::raw::c_void,
                                                          aData:
                                                              *mut ::std::os::raw::c_uchar,
                                                          aSize:
                                                              *const IntSize,
                                                          aStride: i32,
                                                          aFormat:
                                                              SurfaceFormat)
                                         -> already_AddRefed<SourceSurface>,
    pub OptimizeSourceSurface: unsafe extern "C" fn(this:
                                                        *mut ::std::os::raw::c_void,
                                                    aSurface:
                                                        *mut SourceSurface)
                                   -> already_AddRefed<SourceSurface>,
    pub OptimizeSourceSurfaceForUnknownAlpha: unsafe extern "C" fn(this:
                                                                       *mut ::std::os::raw::c_void,
                                                                   aSurface:
                                                                       *mut SourceSurface)
                                                  ->
                                                      already_AddRefed<SourceSurface>,
    pub CreateSourceSurfaceFromNativeSurface: unsafe extern "C" fn(this:
                                                                       *mut ::std::os::raw::c_void,
                                                                   aSurface:
                                                                       *const NativeSurface)
                                                  ->
                                                      already_AddRefed<SourceSurface>,
    pub CreateSimilarDrawTarget: unsafe extern "C" fn(this:
                                                          *mut ::std::os::raw::c_void,
                                                      aSize: *const IntSize,
                                                      aFormat: SurfaceFormat)
                                     -> already_AddRefed<DrawTarget>,
    pub CreateCaptureDT: unsafe extern "C" fn(this:
                                                  *mut ::std::os::raw::c_void,
                                              aSize: *const IntSize)
                             -> already_AddRefed<DrawTargetCapture>,
    pub CreateShadowDrawTarget: unsafe extern "C" fn(this:
                                                         *mut ::std::os::raw::c_void,
                                                     aSize: *const IntSize,
                                                     aFormat: SurfaceFormat,
                                                     aSigma: f32)
                                    -> already_AddRefed<DrawTarget>,
    pub CreatePathBuilder: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                aFillRule: FillRule)
                               -> already_AddRefed<PathBuilder>,
    pub CreateGradientStops: unsafe extern "C" fn(this:
                                                      *mut ::std::os::raw::c_void,
                                                  aStops: *mut GradientStop,
                                                  aNumStops: u32,
                                                  aExtendMode: ExtendMode)
                                 -> already_AddRefed<GradientStops>,
    pub CreateFilter: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                           aType: FilterType)
                          -> already_AddRefed<FilterNode>,
    pub GetGlyphRasterizationMetrics: unsafe extern "C" fn(this:
                                                               *mut ::std::os::raw::c_void,
                                                           aScaledFont:
                                                               *mut ScaledFont,
                                                           aGlyphIndices:
                                                               *const u16,
                                                           aNumGlyphs: u32,
                                                           aGlyphMetrics:
                                                               *mut GlyphMetrics),
    pub SetTransform: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                           aTransform: *const Matrix),
    pub GetNativeSurface: unsafe extern "C" fn(this:
                                                   *mut ::std::os::raw::c_void,
                                               aType: NativeSurfaceType)
                              -> *mut ::std::os::raw::c_void,
    pub IsDualDrawTarget: unsafe extern "C" fn(this:
                                                   *mut ::std::os::raw::c_void)
                              -> bool,
    pub IsTiledDrawTarget: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void)
                               -> bool,
    pub SupportsRegionClipping: unsafe extern "C" fn(this:
                                                         *mut ::std::os::raw::c_void)
                                    -> bool,
    pub IsCurrentGroupOpaque: unsafe extern "C" fn(this:
                                                       *mut ::std::os::raw::c_void)
                                  -> bool,
    pub SetPermitSubpixelAA: unsafe extern "C" fn(this:
                                                      *mut ::std::os::raw::c_void,
                                                  aPermitSubpixelAA: bool),
    pub DetachAllSnapshots: unsafe extern "C" fn(this:
                                                     *mut ::std::os::raw::c_void),
}
impl DrawTarget {
    #[inline]
    pub fn mTransformDirty(&self) -> u8 {
        (self._bitfield_1 & (1usize as u8)) >> 0usize
    }
    #[inline]
    pub fn set_mTransformDirty(&mut self, val: bool) {
        self._bitfield_1 &= !(1usize as u8);
        self._bitfield_1 |= ((val as u8) << 0usize) & (1usize as u8);
    }
    #[inline]
    pub fn mPermitSubpixelAA(&self) -> u8 {
        (self._bitfield_1 & (2usize as u8)) >> 1usize
    }
    #[inline]
    pub fn set_mPermitSubpixelAA(&mut self, val: bool) {
        self._bitfield_1 &= !(2usize as u8);
        self._bitfield_1 |= ((val as u8) << 1usize) & (2usize as u8);
    }
    pub const fn new_bitfield_1(mTransformDirty: bool,
                                mPermitSubpixelAA: bool) -> u8 {
        0 | ((mTransformDirty as u8) << 0u32) |
            ((mPermitSubpixelAA as u8) << 1u32)
    }
}
#[test]
fn bindgen_test_layout_DrawTarget() {
    assert_eq!(::std::mem::size_of::<DrawTarget>() , 80usize);
    assert_eq!(::std::mem::align_of::<DrawTarget>() , 8usize);
}
extern "C" {
    fn ZNK7mozilla3gfx10DrawTarget12GetTransformEv(this: *mut DrawTarget)
     -> Matrix;
    fn ZN7mozilla3gfx10DrawTarget15ConcatTransformERKNS0_6MatrixE(this:
                                                                      *mut DrawTarget,
                                                                  aTransform:
                                                                      *const Matrix);
    fn ZNK7mozilla3gfx10DrawTarget9GetFormatEv(this: *mut DrawTarget)
     -> SurfaceFormat;
    fn ZN7mozilla3gfx10DrawTarget11AddUserDataEPNS0_11UserDataKeyEPvPFvS4_E(this:
                                                                                *mut DrawTarget,
                                                                            key:
                                                                                *mut UserDataKey,
                                                                            userData:
                                                                                *mut ::std::os::raw::c_void,
                                                                            destroy:
                                                                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                                               *mut ::std::os::raw::c_void)>);
    fn ZNK7mozilla3gfx10DrawTarget11GetUserDataEPNS0_11UserDataKeyE(this:
                                                                        *mut DrawTarget,
                                                                    key:
                                                                        *mut UserDataKey)
     -> *mut ::std::os::raw::c_void;
    fn ZN7mozilla3gfx10DrawTarget14RemoveUserDataEPNS0_11UserDataKeyE(this:
                                                                          *mut DrawTarget,
                                                                      key:
                                                                          *mut UserDataKey)
     -> *mut ::std::os::raw::c_void;
    fn ZN7mozilla3gfx10DrawTarget13SetOpaqueRectERKNS0_12IntRectTypedINS0_12UnknownUnitsEEE(this:
                                                                                                *mut DrawTarget,
                                                                                            aRect:
                                                                                                *const IntRect);
    fn ZNK7mozilla3gfx10DrawTarget13GetOpaqueRectEv(this: *mut DrawTarget)
     -> *const IntRect;
    fn ZN7mozilla3gfx10DrawTarget19GetPermitSubpixelAAEv(this:
                                                             *mut DrawTarget)
     -> bool;
}
impl DrawTarget {
    #[inline]
    pub unsafe fn GetTransform(&mut self) -> Matrix {
        ZNK7mozilla3gfx10DrawTarget12GetTransformEv(&mut *self)
    }
    #[inline]
    pub unsafe fn ConcatTransform(&mut self, aTransform: *const Matrix) {
        ZN7mozilla3gfx10DrawTarget15ConcatTransformERKNS0_6MatrixE(&mut *self,
                                                                   aTransform)
    }
    #[inline]
    pub unsafe fn GetFormat(&mut self) -> SurfaceFormat {
        ZNK7mozilla3gfx10DrawTarget9GetFormatEv(&mut *self)
    }
    #[inline]
    pub unsafe fn AddUserData(&mut self, key: *mut UserDataKey,
                              userData: *mut ::std::os::raw::c_void,
                              destroy:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>) {
        ZN7mozilla3gfx10DrawTarget11AddUserDataEPNS0_11UserDataKeyEPvPFvS4_E(&mut *self,
                                                                             key,
                                                                             userData,
                                                                             destroy)
    }
    #[inline]
    pub unsafe fn GetUserData(&mut self, key: *mut UserDataKey)
     -> *mut ::std::os::raw::c_void {
        ZNK7mozilla3gfx10DrawTarget11GetUserDataEPNS0_11UserDataKeyE(&mut *self,
                                                                     key)
    }
    #[inline]
    pub unsafe fn RemoveUserData(&mut self, key: *mut UserDataKey)
     -> *mut ::std::os::raw::c_void {
        ZN7mozilla3gfx10DrawTarget14RemoveUserDataEPNS0_11UserDataKeyE(&mut *self,
                                                                       key)
    }
    /** Within this rectangle all pixels will be opaque by the time the result of
   * this DrawTarget is first used for drawing. Either by the underlying surface
   * being used as an input to external drawing, or Snapshot() being called.
   * This rectangle is specified in device space.
   */
    #[inline]
    pub unsafe fn SetOpaqueRect(&mut self, aRect: *const IntRect) {
        ZN7mozilla3gfx10DrawTarget13SetOpaqueRectERKNS0_12IntRectTypedINS0_12UnknownUnitsEEE(&mut *self,
                                                                                             aRect)
    }
    #[inline]
    pub unsafe fn GetOpaqueRect(&mut self) -> *const IntRect {
        ZNK7mozilla3gfx10DrawTarget13GetOpaqueRectEv(&mut *self)
    }
    #[inline]
    pub unsafe fn GetPermitSubpixelAA(&mut self) -> bool {
        ZN7mozilla3gfx10DrawTarget19GetPermitSubpixelAAEv(&mut *self)
    }
}
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct DrawTargetCapture {
    pub _base: DrawTarget,
}
#[test]
fn bindgen_test_layout_DrawTargetCapture() {
    assert_eq!(::std::mem::size_of::<DrawTargetCapture>() , 80usize);
    assert_eq!(::std::mem::align_of::<DrawTargetCapture>() , 8usize);
}
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct DrawEventRecorder {
    pub _base: RefCounted<DrawEventRecorder>,
}
#[repr(C)]
#[unsafe_no_drop_flag]
#[derive(Debug)]
pub struct Tile {
    pub mDrawTarget: RefPtr<DrawTarget>,
    pub mTileOrigin: IntPoint,
}
#[test]
fn bindgen_test_layout_Tile() {
    assert_eq!(::std::mem::size_of::<Tile>() , 16usize);
    assert_eq!(::std::mem::align_of::<Tile>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TileSet {
    pub mTiles: *mut Tile,
    pub mTileCount: usize,
}
impl ::std::clone::Clone for TileSet {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_TileSet() {
    assert_eq!(::std::mem::size_of::<TileSet>() , 16usize);
    assert_eq!(::std::mem::align_of::<TileSet>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Config {
    pub mLogForwarder: *mut LogForwarder,
    pub mMaxTextureSize: i32,
    pub mMaxAllocSize: i32,
}
impl ::std::clone::Clone for Config {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Config() {
    assert_eq!(::std::mem::size_of::<Config>() , 16usize);
    assert_eq!(::std::mem::align_of::<Config>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Factory;
impl ::std::clone::Clone for Factory {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    fn ZN7mozilla3gfx7Factory4InitERKNS0_6ConfigE(aConfig: *const Config);
    fn ZN7mozilla3gfx7Factory8ShutDownEv();
    fn ZN7mozilla3gfx7Factory7HasSSE2Ev() -> bool;
    fn ZN7mozilla3gfx7Factory16CheckSurfaceSizeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEEii(sz:
                                                                                                 *const IntSize,
                                                                                             limit:
                                                                                                 i32,
                                                                                             allocLimit:
                                                                                                 i32)
     -> bool;
    fn ZN7mozilla3gfx7Factory15CheckBufferSizeEi(bufSize: i32) -> bool;
    fn ZN7mozilla3gfx7Factory21ReasonableSurfaceSizeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEE(aSize:
                                                                                                    *const IntSize)
     -> bool;
    fn ZN7mozilla3gfx7Factory18AllowedSurfaceSizeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEE(aSize:
                                                                                                 *const IntSize)
     -> bool;
    fn ZN7mozilla3gfx7Factory31CreateDrawTargetForCairoSurfaceEP14_cairo_surfaceRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEEPNS0_13SurfaceFormatE(aSurface:
                                                                                                                                                    *mut cairo_surface_t,
                                                                                                                                                aSize:
                                                                                                                                                    *const IntSize,
                                                                                                                                                aFormat:
                                                                                                                                                    *mut SurfaceFormat)
     -> already_AddRefed<DrawTarget>;
    fn ZN7mozilla3gfx7Factory34CreateSourceSurfaceForCairoSurfaceEP14_cairo_surfaceRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatE(aSurface:
                                                                                                                                                      *mut cairo_surface_t,
                                                                                                                                                  aSize:
                                                                                                                                                      *const IntSize,
                                                                                                                                                  aFormat:
                                                                                                                                                      SurfaceFormat)
     -> already_AddRefed<SourceSurface>;
    fn ZN7mozilla3gfx7Factory16CreateDrawTargetENS0_11BackendTypeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatE(aBackend:
                                                                                                                                     BackendType,
                                                                                                                                 aSize:
                                                                                                                                     *const IntSize,
                                                                                                                                 aFormat:
                                                                                                                                     SurfaceFormat)
     -> already_AddRefed<DrawTarget>;
    fn ZN7mozilla3gfx7Factory25CreateRecordingDrawTargetEPNS0_17DrawEventRecorderEPNS0_10DrawTargetE(aRecorder:
                                                                                                         *mut DrawEventRecorder,
                                                                                                     aDT:
                                                                                                         *mut DrawTarget)
     -> already_AddRefed<DrawTarget>;
    fn ZN7mozilla3gfx7Factory23CreateDrawTargetForDataENS0_11BackendTypeEPhRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEEiNS0_13SurfaceFormatEb(aBackend:
                                                                                                                                                BackendType,
                                                                                                                                            aData:
                                                                                                                                                *mut ::std::os::raw::c_uchar,
                                                                                                                                            aSize:
                                                                                                                                                *const IntSize,
                                                                                                                                            aStride:
                                                                                                                                                i32,
                                                                                                                                            aFormat:
                                                                                                                                                SurfaceFormat,
                                                                                                                                            aUninitialized:
                                                                                                                                                bool)
     -> already_AddRefed<DrawTarget>;
    fn ZN7mozilla3gfx7Factory29CreateScaledFontForNativeFontERKNS0_10NativeFontEf(aNativeFont:
                                                                                      *const NativeFont,
                                                                                  aSize:
                                                                                      Float)
     -> already_AddRefed<ScaledFont>;
    fn ZN7mozilla3gfx7Factory24CreateNativeFontResourceEPhjNS0_8FontTypeE(aData:
                                                                              *mut u8,
                                                                          aSize:
                                                                              u32,
                                                                          aType:
                                                                              FontType)
     -> already_AddRefed<NativeFontResource>;
    fn ZN7mozilla3gfx7Factory25CreateScaledFontWithCairoERKNS0_10NativeFontEfP18_cairo_scaled_font(aNativeFont:
                                                                                                       *const NativeFont,
                                                                                                   aSize:
                                                                                                       Float,
                                                                                                   aScaledFont:
                                                                                                       *mut cairo_scaled_font_t)
     -> already_AddRefed<ScaledFont>;
    fn ZN7mozilla3gfx7Factory23CreateDataSourceSurfaceERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatEb(aSize:
                                                                                                                           *const IntSize,
                                                                                                                       aFormat:
                                                                                                                           SurfaceFormat,
                                                                                                                       aZero:
                                                                                                                           bool)
     -> already_AddRefed<DataSourceSurface>;
    fn ZN7mozilla3gfx7Factory33CreateDataSourceSurfaceWithStrideERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatEib(aSize:
                                                                                                                                      *const IntSize,
                                                                                                                                  aFormat:
                                                                                                                                      SurfaceFormat,
                                                                                                                                  aStride:
                                                                                                                                      i32,
                                                                                                                                  aZero:
                                                                                                                                      bool)
     -> already_AddRefed<DataSourceSurface>;
    fn ZN7mozilla3gfx7Factory31CreateWrappingDataSourceSurfaceEPhiRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatEPFvPvES9_(aData:
                                                                                                                                              *mut u8,
                                                                                                                                          aStride:
                                                                                                                                              i32,
                                                                                                                                          aSize:
                                                                                                                                              *const IntSize,
                                                                                                                                          aFormat:
                                                                                                                                              SurfaceFormat,
                                                                                                                                          aDeallocator:
                                                                                                                                              ::std::option::Option<unsafe extern "C" fn()>,
                                                                                                                                          aClosure:
                                                                                                                                              *mut ::std::os::raw::c_void)
     -> already_AddRefed<DataSourceSurface>;
    fn ZN7mozilla3gfx7Factory21CopyDataSourceSurfaceEPNS0_17DataSourceSurfaceES3_(aSource:
                                                                                      *mut DataSourceSurface,
                                                                                  aDest:
                                                                                      *mut DataSourceSurface);
    fn ZN7mozilla3gfx7Factory26CreateEventRecorderForFileEPKc(aFilename:
                                                                  *const ::std::os::raw::c_char)
     -> already_AddRefed<DrawEventRecorder>;
    fn ZN7mozilla3gfx7Factory22SetGlobalEventRecorderEPNS0_17DrawEventRecorderE(aRecorder:
                                                                                    *mut DrawEventRecorder);
    fn ZN7mozilla3gfx7Factory15SetLogForwarderEPNS0_12LogForwarderE(aLogFwd:
                                                                        *mut LogForwarder);
    fn ZN7mozilla3gfx7Factory17GetMaxSurfaceSizeENS0_11BackendTypeE(aType:
                                                                        BackendType)
     -> u32;
    fn ZN7mozilla3gfx7Factory15GetLogForwarderEv() -> *mut LogForwarder;
    fn ZN7mozilla3gfx7Factory14PurgeAllCachesEv();
    fn ZN7mozilla3gfx7Factory20CreateDualDrawTargetEPNS0_10DrawTargetES3_(targetA:
                                                                              *mut DrawTarget,
                                                                          targetB:
                                                                              *mut DrawTarget)
     -> already_AddRefed<DrawTarget>;
    fn ZN7mozilla3gfx7Factory21CreateTiledDrawTargetERKNS0_7TileSetE(aTileSet:
                                                                         *const TileSet)
     -> already_AddRefed<DrawTarget>;
    fn ZN7mozilla3gfx7Factory32DoesBackendSupportDataDrawtargetENS0_11BackendTypeE(aType:
                                                                                       BackendType)
     -> bool;
}
impl Factory {
    #[inline]
    pub unsafe fn Init(aConfig: *const Config) {
        ZN7mozilla3gfx7Factory4InitERKNS0_6ConfigE(aConfig)
    }
    #[inline]
    pub unsafe fn ShutDown() { ZN7mozilla3gfx7Factory8ShutDownEv() }
    #[inline]
    pub unsafe fn HasSSE2() -> bool { ZN7mozilla3gfx7Factory7HasSSE2Ev() }
    /**
   * Returns false if any of the following are true:
   *
   *   - the width/height of |sz| are less than or equal to zero
   *   - the width/height of |sz| are greater than |limit|
   *   - the number of bytes that need to be allocated for the surface is too
   *     big to fit in an int32_t, or bigger than |allocLimit|, if specifed
   *
   * To calculate the number of bytes that need to be allocated for the surface
   * this function makes the conservative assumption that there need to be
   * 4 bytes-per-pixel, and the stride alignment is 16 bytes.
   *
   * The reason for using int32_t rather than uint32_t is again to be
   * conservative; some code has in the past and may in the future use signed
   * integers to store buffer lengths etc.
   */
    #[inline]
    pub unsafe fn CheckSurfaceSize(sz: *const IntSize, limit: i32,
                                   allocLimit: i32) -> bool {
        ZN7mozilla3gfx7Factory16CheckSurfaceSizeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEEii(sz,
                                                                                              limit,
                                                                                              allocLimit)
    }
    /**
   * Make sure that the given buffer size doesn't exceed the allocation limit.
   */
    #[inline]
    pub unsafe fn CheckBufferSize(bufSize: i32) -> bool {
        ZN7mozilla3gfx7Factory15CheckBufferSizeEi(bufSize)
    }
    /** Make sure the given dimension satisfies the CheckSurfaceSize and is
   * within 8k limit.  The 8k value is chosen a bit randomly.
   */
    #[inline]
    pub unsafe fn ReasonableSurfaceSize(aSize: *const IntSize) -> bool {
        ZN7mozilla3gfx7Factory21ReasonableSurfaceSizeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEE(aSize)
    }
    #[inline]
    pub unsafe fn AllowedSurfaceSize(aSize: *const IntSize) -> bool {
        ZN7mozilla3gfx7Factory18AllowedSurfaceSizeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEE(aSize)
    }
    #[inline]
    pub unsafe fn CreateDrawTargetForCairoSurface(aSurface:
                                                      *mut cairo_surface_t,
                                                  aSize: *const IntSize,
                                                  aFormat: *mut SurfaceFormat)
     -> already_AddRefed<DrawTarget> {
        ZN7mozilla3gfx7Factory31CreateDrawTargetForCairoSurfaceEP14_cairo_surfaceRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEEPNS0_13SurfaceFormatE(aSurface,
                                                                                                                                                 aSize,
                                                                                                                                                 aFormat)
    }
    #[inline]
    pub unsafe fn CreateSourceSurfaceForCairoSurface(aSurface:
                                                         *mut cairo_surface_t,
                                                     aSize: *const IntSize,
                                                     aFormat: SurfaceFormat)
     -> already_AddRefed<SourceSurface> {
        ZN7mozilla3gfx7Factory34CreateSourceSurfaceForCairoSurfaceEP14_cairo_surfaceRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatE(aSurface,
                                                                                                                                                   aSize,
                                                                                                                                                   aFormat)
    }
    #[inline]
    pub unsafe fn CreateDrawTarget(aBackend: BackendType,
                                   aSize: *const IntSize,
                                   aFormat: SurfaceFormat)
     -> already_AddRefed<DrawTarget> {
        ZN7mozilla3gfx7Factory16CreateDrawTargetENS0_11BackendTypeERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatE(aBackend,
                                                                                                                                  aSize,
                                                                                                                                  aFormat)
    }
    #[inline]
    pub unsafe fn CreateRecordingDrawTarget(aRecorder: *mut DrawEventRecorder,
                                            aDT: *mut DrawTarget)
     -> already_AddRefed<DrawTarget> {
        ZN7mozilla3gfx7Factory25CreateRecordingDrawTargetEPNS0_17DrawEventRecorderEPNS0_10DrawTargetE(aRecorder,
                                                                                                      aDT)
    }
    #[inline]
    pub unsafe fn CreateDrawTargetForData(aBackend: BackendType,
                                          aData: *mut ::std::os::raw::c_uchar,
                                          aSize: *const IntSize, aStride: i32,
                                          aFormat: SurfaceFormat,
                                          aUninitialized: bool)
     -> already_AddRefed<DrawTarget> {
        ZN7mozilla3gfx7Factory23CreateDrawTargetForDataENS0_11BackendTypeEPhRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEEiNS0_13SurfaceFormatEb(aBackend,
                                                                                                                                             aData,
                                                                                                                                             aSize,
                                                                                                                                             aStride,
                                                                                                                                             aFormat,
                                                                                                                                             aUninitialized)
    }
    #[inline]
    pub unsafe fn CreateScaledFontForNativeFont(aNativeFont:
                                                    *const NativeFont,
                                                aSize: Float)
     -> already_AddRefed<ScaledFont> {
        ZN7mozilla3gfx7Factory29CreateScaledFontForNativeFontERKNS0_10NativeFontEf(aNativeFont,
                                                                                   aSize)
    }
    /**
   * This creates a NativeFontResource from TrueType data.
   *
   * @param aData Pointer to the data
   * @param aSize Size of the TrueType data
   * @param aType Type of NativeFontResource that should be created.
   * @return a NativeFontResource of nullptr if failed.
   */
    #[inline]
    pub unsafe fn CreateNativeFontResource(aData: *mut u8, aSize: u32,
                                           aType: FontType)
     -> already_AddRefed<NativeFontResource> {
        ZN7mozilla3gfx7Factory24CreateNativeFontResourceEPhjNS0_8FontTypeE(aData,
                                                                           aSize,
                                                                           aType)
    }
    /**
   * This creates a scaled font with an associated cairo_scaled_font_t, and
   * must be used when using the Cairo backend. The NativeFont and
   * cairo_scaled_font_t* parameters must correspond to the same font.
   */
    #[inline]
    pub unsafe fn CreateScaledFontWithCairo(aNativeFont: *const NativeFont,
                                            aSize: Float,
                                            aScaledFont:
                                                *mut cairo_scaled_font_t)
     -> already_AddRefed<ScaledFont> {
        ZN7mozilla3gfx7Factory25CreateScaledFontWithCairoERKNS0_10NativeFontEfP18_cairo_scaled_font(aNativeFont,
                                                                                                    aSize,
                                                                                                    aScaledFont)
    }
    /**
   * This creates a simple data source surface for a certain size. It allocates
   * new memory for the surface. This memory is freed when the surface is
   * destroyed.  The caller is responsible for handing the case where nullptr
   * is returned. The surface is not zeroed unless requested.
   */
    #[inline]
    pub unsafe fn CreateDataSourceSurface(aSize: *const IntSize,
                                          aFormat: SurfaceFormat, aZero: bool)
     -> already_AddRefed<DataSourceSurface> {
        ZN7mozilla3gfx7Factory23CreateDataSourceSurfaceERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatEb(aSize,
                                                                                                                        aFormat,
                                                                                                                        aZero)
    }
    /**
   * This creates a simple data source surface for a certain size with a
   * specific stride, which must be large enough to fit all pixels.
   * It allocates new memory for the surface. This memory is freed when
   * the surface is destroyed.  The caller is responsible for handling the case
   * where nullptr is returned. The surface is not zeroed unless requested.
   */
    #[inline]
    pub unsafe fn CreateDataSourceSurfaceWithStride(aSize: *const IntSize,
                                                    aFormat: SurfaceFormat,
                                                    aStride: i32, aZero: bool)
     -> already_AddRefed<DataSourceSurface> {
        ZN7mozilla3gfx7Factory33CreateDataSourceSurfaceWithStrideERKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatEib(aSize,
                                                                                                                                   aFormat,
                                                                                                                                   aStride,
                                                                                                                                   aZero)
    }
    /**
   * This creates a simple data source surface for some existing data. It will
   * wrap this data and the data for this source surface.
   *
   * We can provide a custom destroying function for |aData|. This will be
   * called in the surface dtor using |aDeallocator| and the |aClosure|. If
   * there are errors during construction(return a nullptr surface), the caller
   * is responsible for the deallocation.
   *
   * If there is no destroying function, the caller is responsible for
   * deallocating the aData memory only after destruction of this
   * DataSourceSurface.
   */
    #[inline]
    pub unsafe fn CreateWrappingDataSourceSurface(aData: *mut u8,
                                                  aStride: i32,
                                                  aSize: *const IntSize,
                                                  aFormat: SurfaceFormat,
                                                  aDeallocator:
                                                      ::std::option::Option<unsafe extern "C" fn()>,
                                                  aClosure:
                                                      *mut ::std::os::raw::c_void)
     -> already_AddRefed<DataSourceSurface> {
        ZN7mozilla3gfx7Factory31CreateWrappingDataSourceSurfaceEPhiRKNS0_12IntSizeTypedINS0_12UnknownUnitsEEENS0_13SurfaceFormatEPFvPvES9_(aData,
                                                                                                                                           aStride,
                                                                                                                                           aSize,
                                                                                                                                           aFormat,
                                                                                                                                           aDeallocator,
                                                                                                                                           aClosure)
    }
    #[inline]
    pub unsafe fn CopyDataSourceSurface(aSource: *mut DataSourceSurface,
                                        aDest: *mut DataSourceSurface) {
        ZN7mozilla3gfx7Factory21CopyDataSourceSurfaceEPNS0_17DataSourceSurfaceES3_(aSource,
                                                                                   aDest)
    }
    #[inline]
    pub unsafe fn CreateEventRecorderForFile(aFilename:
                                                 *const ::std::os::raw::c_char)
     -> already_AddRefed<DrawEventRecorder> {
        ZN7mozilla3gfx7Factory26CreateEventRecorderForFileEPKc(aFilename)
    }
    #[inline]
    pub unsafe fn SetGlobalEventRecorder(aRecorder: *mut DrawEventRecorder) {
        ZN7mozilla3gfx7Factory22SetGlobalEventRecorderEPNS0_17DrawEventRecorderE(aRecorder)
    }
    #[inline]
    pub unsafe fn SetLogForwarder(aLogFwd: *mut LogForwarder) {
        ZN7mozilla3gfx7Factory15SetLogForwarderEPNS0_12LogForwarderE(aLogFwd)
    }
    #[inline]
    pub unsafe fn GetMaxSurfaceSize(aType: BackendType) -> u32 {
        ZN7mozilla3gfx7Factory17GetMaxSurfaceSizeENS0_11BackendTypeE(aType)
    }
    #[inline]
    pub unsafe fn GetLogForwarder() -> *mut LogForwarder {
        ZN7mozilla3gfx7Factory15GetLogForwarderEv()
    }
    #[inline]
    pub unsafe fn PurgeAllCaches() {
        ZN7mozilla3gfx7Factory14PurgeAllCachesEv()
    }
    #[inline]
    pub unsafe fn CreateDualDrawTarget(targetA: *mut DrawTarget,
                                       targetB: *mut DrawTarget)
     -> already_AddRefed<DrawTarget> {
        ZN7mozilla3gfx7Factory20CreateDualDrawTargetEPNS0_10DrawTargetES3_(targetA,
                                                                           targetB)
    }
    #[inline]
    pub unsafe fn CreateTiledDrawTarget(aTileSet: *const TileSet)
     -> already_AddRefed<DrawTarget> {
        ZN7mozilla3gfx7Factory21CreateTiledDrawTargetERKNS0_7TileSetE(aTileSet)
    }
    #[inline]
    pub unsafe fn DoesBackendSupportDataDrawtarget(aType: BackendType)
     -> bool {
        ZN7mozilla3gfx7Factory32DoesBackendSupportDataDrawtargetENS0_11BackendTypeE(aType)
    }
}
extern "C" {
    #[link_name = "ZN7mozilla3gfx7Factory7sConfigE"]
    pub static mut Factory_consts_sConfig: *mut Config;
    #[link_name = "ZN7mozilla3gfx7Factory9mRecorderE"]
    pub static mut Factory_consts_mRecorder: *mut DrawEventRecorder;
}
